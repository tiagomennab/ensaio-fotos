const { PrismaClient } = require('@prisma/client')

async function fixVideoQualityEnum() {
  console.log('üîß Corrigindo enum VideoQuality no banco...')
  
  const prisma = new PrismaClient({
    log: ['query', 'info', 'warn', 'error']
  })
  
  try {
    await prisma.$connect()
    
    // Passo 1: Verificar o estado atual do enum
    console.log('\n1. Verificando enum VideoQuality atual...')
    
    const currentEnum = await prisma.$queryRaw`
      SELECT enumlabel 
      FROM pg_enum e
      JOIN pg_type t ON e.enumtypid = t.oid
      WHERE t.typname = 'VideoQuality'
      ORDER BY enumsortorder;
    `
    
    console.log('‚úÖ Enum VideoQuality atual:', currentEnum.map(e => e.enumlabel))
    
    // Verificar se j√° est√° correto
    const hasLowercase = currentEnum.some(e => e.enumlabel === 'standard' || e.enumlabel === 'pro')
    const hasUppercase = currentEnum.some(e => e.enumlabel === 'STANDARD' || e.enumlabel === 'PRO')
    
    if (hasLowercase && !hasUppercase) {
      console.log('‚úÖ Enum j√° est√° correto (lowercase)!')
      return true
    }
    
    console.log('\n2. Corrigindo enum VideoQuality...')
    
    // Passo 2: Se tem valores uppercase, precisamos migrar
    if (hasUppercase) {
      console.log('‚ö†Ô∏è  Encontrados valores uppercase, migrando...')
      
      // Se o enum tem valores uppercase, vamos recriar
      if (hasUppercase && !hasLowercase) {
        // Adicionar novos valores lowercase
        try {
          await prisma.$executeRaw`ALTER TYPE "VideoQuality" ADD VALUE 'standard';`
          console.log('‚úÖ Adicionado valor: standard')
        } catch (e) {
          console.log('‚ö†Ô∏è Valor standard j√° existe:', e.message)
        }
        
        try {
          await prisma.$executeRaw`ALTER TYPE "VideoQuality" ADD VALUE 'pro';`
          console.log('‚úÖ Adicionado valor: pro')
        } catch (e) {
          console.log('‚ö†Ô∏è Valor pro j√° existe:', e.message)
        }
        
        // Migrar dados existentes
        console.log('üîÑ Migrando dados da tabela video_generations...')
        
        try {
          await prisma.$executeRaw`
            UPDATE video_generations 
            SET quality = CASE 
              WHEN quality::text = 'STANDARD' THEN 'standard'::"VideoQuality"
              WHEN quality::text = 'PRO' THEN 'pro'::"VideoQuality"
              ELSE quality
            END;
          `
          console.log('‚úÖ Dados migrados com sucesso!')
        } catch (migrateError) {
          console.log('‚ö†Ô∏è Erro na migra√ß√£o de dados:', migrateError.message)
        }
        
        // N√£o podemos remover valores de enum em PostgreSQL facilmente
        // Os valores antigos v√£o ficar, mas n√£o vamos usar mais
        console.log('‚ö†Ô∏è Valores uppercase permanecer√£o no enum (limita√ß√£o PostgreSQL)')
        console.log('‚úÖ Aplica√ß√£o usar√° apenas valores lowercase')
      }
    } else {
      // Se n√£o tem valores, criar do zero
      console.log('üÜï Criando enum VideoQuality...')
      try {
        await prisma.$executeRaw`
          DROP TYPE IF EXISTS "VideoQuality";
          CREATE TYPE "VideoQuality" AS ENUM ('standard', 'pro');
        `
        console.log('‚úÖ Enum VideoQuality criado com valores lowercase!')
      } catch (e) {
        console.log('‚ö†Ô∏è Erro ao recriar enum:', e.message)
      }
    }
    
    // Passo 3: Verificar se a coluna da tabela usa o enum correto
    console.log('\n3. Verificando coluna quality na tabela video_generations...')
    
    const columnInfo = await prisma.$queryRaw`
      SELECT column_name, data_type, udt_name
      FROM information_schema.columns 
      WHERE table_name = 'video_generations' AND column_name = 'quality';
    `
    
    console.log('‚úÖ Info da coluna quality:', columnInfo)
    
    // Passo 4: Verificar enum final
    console.log('\n4. Verificando enum final...')
    
    const finalEnum = await prisma.$queryRaw`
      SELECT enumlabel 
      FROM pg_enum e
      JOIN pg_type t ON e.enumtypid = t.oid
      WHERE t.typname = 'VideoQuality'
      ORDER BY enumsortorder;
    `
    
    console.log('‚úÖ Enum VideoQuality final:', finalEnum.map(e => e.enumlabel))
    
    // Passo 5: Teste de cria√ß√£o de v√≠deo
    console.log('\n5. Testando inser√ß√£o com valores corretos...')
    
    // N√£o vamos inserir dados reais, apenas simular a query
    const testUserId = 'test-user-id'
    const testRequest = {
      sourceImageUrl: 'https://example.com/test.jpg',
      prompt: 'Test prompt for video generation',
      duration: 5,
      aspectRatio: '16:9',
      quality: 'standard', // lowercase
      creditsUsed: 20
    }
    
    console.log('üß™ Simulando cria√ß√£o com qualidade:', testRequest.quality)
    
    // Simular apenas a query (comentado para n√£o criar dados de teste)
    /*
    const testVideo = await prisma.videoGeneration.create({
      data: {
        userId: testUserId,
        sourceImageUrl: testRequest.sourceImageUrl,
        prompt: testRequest.prompt,
        duration: testRequest.duration,
        aspectRatio: testRequest.aspectRatio,
        quality: testRequest.quality,
        creditsUsed: testRequest.creditsUsed,
        status: 'STARTING'
      }
    })
    
    console.log('‚úÖ Teste de cria√ß√£o bem-sucedido!', testVideo.id)
    
    // Limpar dados de teste
    await prisma.videoGeneration.delete({
      where: { id: testVideo.id }
    })
    */
    
    console.log('‚úÖ Simula√ß√£o de cria√ß√£o bem-sucedida!')
    
    console.log('\nüéâ CORRE√á√ÉO DO ENUM CONCLU√çDA!')
    console.log('‚úÖ Enum VideoQuality configurado com valores lowercase')
    console.log('‚úÖ Aplica√ß√£o deve funcionar corretamente agora')
    
    return true
    
  } catch (error) {
    console.error('‚ùå Erro na corre√ß√£o do enum:', error.message)
    console.error('Stack:', error.stack)
    return false
  } finally {
    await prisma.$disconnect()
    console.log('\nüëã Desconectado do banco')
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  fixVideoQualityEnum().then(success => {
    if (success) {
      console.log('\nüöÄ SUCESSO! Tente criar um v√≠deo novamente.')
    } else {
      console.log('\n‚ùå Problemas na corre√ß√£o. Verifique logs acima.')
    }
  }).catch(console.error)
}

module.exports = { fixVideoQualityEnum }