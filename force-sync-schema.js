const { PrismaClient } = require('@prisma/client')

async function forceSyncSchema() {
  console.log('üöÄ FOR√áANDO SINCRONIZA√á√ÉO DO SCHEMA...')
  console.log('‚ö†Ô∏è  ATEN√á√ÉO: Esta opera√ß√£o pode alterar/deletar dados!')
  
  const prisma = new PrismaClient({
    log: ['query', 'info', 'warn', 'error']
  })
  
  try {
    await prisma.$connect()
    console.log('‚úÖ Conectado ao banco')
    
    // Passo 1: Corrigir colunas faltantes mais cr√≠ticas
    console.log('\n1. Adicionando colunas cr√≠ticas faltantes...')
    
    // accounts: userId e providerAccountId (snake_case para camelCase)
    try {
      await prisma.$executeRaw`
        ALTER TABLE "accounts" 
        ADD COLUMN IF NOT EXISTS "userId" TEXT,
        ADD COLUMN IF NOT EXISTS "providerAccountId" TEXT;
      `
      
      // Copiar dados das colunas snake_case para camelCase
      await prisma.$executeRaw`
        UPDATE "accounts" 
        SET "userId" = "user_id", "providerAccountId" = "provider_account_id"
        WHERE "userId" IS NULL OR "providerAccountId" IS NULL;
      `
      console.log('‚úÖ accounts: userId e providerAccountId adicionadas')
    } catch (e) {
      console.log('‚ö†Ô∏è accounts j√° tem as colunas:', e.message)
    }
    
    // sessions: sessionToken e userId
    try {
      await prisma.$executeRaw`
        ALTER TABLE "sessions" 
        ADD COLUMN IF NOT EXISTS "sessionToken" TEXT,
        ADD COLUMN IF NOT EXISTS "userId" TEXT;
      `
      
      await prisma.$executeRaw`
        UPDATE "sessions" 
        SET "sessionToken" = "session_token", "userId" = "user_id"
        WHERE "sessionToken" IS NULL OR "userId" IS NULL;
      `
      console.log('‚úÖ sessions: sessionToken e userId adicionadas')
    } catch (e) {
      console.log('‚ö†Ô∏è sessions j√° tem as colunas:', e.message)
    }
    
    // edit_history: colunas faltantes
    try {
      await prisma.$executeRaw`
        ALTER TABLE "edit_history" 
        ADD COLUMN IF NOT EXISTS "originalImageUrl" TEXT,
        ADD COLUMN IF NOT EXISTS "editedImageUrl" TEXT,
        ADD COLUMN IF NOT EXISTS "thumbnailUrl" TEXT,
        ADD COLUMN IF NOT EXISTS "createdAt" TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP,
        ADD COLUMN IF NOT EXISTS "updatedAt" TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP;
      `
      
      // Copiar dados das colunas snake_case
      await prisma.$executeRaw`
        UPDATE "edit_history" 
        SET 
          "originalImageUrl" = COALESCE("originalImageUrl", "original_image_url", ''),
          "editedImageUrl" = COALESCE("editedImageUrl", "edited_image_url", ''),
          "thumbnailUrl" = "thumbnail_url",
          "createdAt" = COALESCE("createdAt", "created_at", CURRENT_TIMESTAMP),
          "updatedAt" = COALESCE("updatedAt", "updated_at", CURRENT_TIMESTAMP)
        WHERE "originalImageUrl" IS NULL OR "editedImageUrl" IS NULL;
      `
      console.log('‚úÖ edit_history: colunas de imagem adicionadas')
    } catch (e) {
      console.log('‚ö†Ô∏è edit_history j√° tem as colunas:', e.message)
    }
    
    // Passo 2: Corrigir principais nullable mismatches
    console.log('\n2. Corrigindo nullable mismatches cr√≠ticos...')
    
    // users: principais colunas que devem ser nullable
    try {
      await prisma.$executeRaw`
        ALTER TABLE "users" 
        ALTER COLUMN "name" DROP NOT NULL,
        ALTER COLUMN "avatar" DROP NOT NULL,
        ALTER COLUMN "password" DROP NOT NULL,
        ALTER COLUMN "emailVerified" DROP NOT NULL,
        ALTER COLUMN "stripeCustomerId" DROP NOT NULL,
        ALTER COLUMN "asaasCustomerId" DROP NOT NULL,
        ALTER COLUMN "subscriptionId" DROP NOT NULL,
        ALTER COLUMN "subscriptionStatus" DROP NOT NULL,
        ALTER COLUMN "subscriptionEndsAt" DROP NOT NULL,
        ALTER COLUMN "subscriptionCancelledAt" DROP NOT NULL,
        ALTER COLUMN "lastLoginAt" DROP NOT NULL;
      `
      console.log('‚úÖ users: nullable constraints corrigidas')
    } catch (e) {
      console.log('‚ö†Ô∏è users nullable:', e.message)
    }
    
    // accounts: colunas opcionais
    try {
      await prisma.$executeRaw`
        ALTER TABLE "accounts" 
        ALTER COLUMN "refresh_token" DROP NOT NULL,
        ALTER COLUMN "access_token" DROP NOT NULL,
        ALTER COLUMN "expires_at" DROP NOT NULL,
        ALTER COLUMN "token_type" DROP NOT NULL,
        ALTER COLUMN "scope" DROP NOT NULL,
        ALTER COLUMN "id_token" DROP NOT NULL,
        ALTER COLUMN "session_state" DROP NOT NULL;
      `
      console.log('‚úÖ accounts: nullable constraints corrigidas')
    } catch (e) {
      console.log('‚ö†Ô∏è accounts nullable:', e.message)
    }
    
    // Passo 3: Adicionar foreign keys cr√≠ticas
    console.log('\n3. Adicionando foreign keys cr√≠ticas...')
    
    try {
      await prisma.$executeRaw`
        ALTER TABLE "accounts" 
        ADD CONSTRAINT IF NOT EXISTS "accounts_userId_fkey" 
        FOREIGN KEY ("userId") REFERENCES "users"("id") ON DELETE CASCADE ON UPDATE CASCADE;
      `
      console.log('‚úÖ accounts: FK para users adicionada')
    } catch (e) {
      console.log('‚ö†Ô∏è accounts FK j√° existe:', e.message)
    }
    
    try {
      await prisma.$executeRaw`
        ALTER TABLE "sessions" 
        ADD CONSTRAINT IF NOT EXISTS "sessions_userId_fkey" 
        FOREIGN KEY ("userId") REFERENCES "users"("id") ON DELETE CASCADE ON UPDATE CASCADE;
      `
      console.log('‚úÖ sessions: FK para users adicionada')
    } catch (e) {
      console.log('‚ö†Ô∏è sessions FK j√° existe:', e.message)
    }
    
    // Passo 4: Corrigir enums que est√£o como text
    console.log('\n4. Corrigindo tipos de enum...')
    
    // credit_transactions: criar enums se n√£o existirem
    try {
      await prisma.$executeRaw`
        DO $$ BEGIN
          IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'CreditTransactionType') THEN
            CREATE TYPE "CreditTransactionType" AS ENUM ('EARNED', 'SPENT', 'EXPIRED', 'REFUNDED');
          END IF;
          
          IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'CreditTransactionSource') THEN
            CREATE TYPE "CreditTransactionSource" AS ENUM ('PURCHASE', 'BONUS', 'GENERATION', 'VIDEO', 'REFUND', 'ADMIN');
          END IF;
        END $$;
      `
      console.log('‚úÖ Enums de credit transactions criados')
    } catch (e) {
      console.log('‚ö†Ô∏è Enums j√° existem:', e.message)
    }
    
    // Passo 5: Teste final de conex√£o
    console.log('\n5. Testando conex√µes do Prisma...')
    
    try {
      const userCount = await prisma.user.count()
      console.log('‚úÖ Users acess√≠vel:', userCount)
      
      const accountCount = await prisma.account.count()
      console.log('‚úÖ Accounts acess√≠vel:', accountCount)
      
      const sessionCount = await prisma.session.count()
      console.log('‚úÖ Sessions acess√≠vel:', sessionCount)
      
      const paymentCount = await prisma.payment.count()
      console.log('‚úÖ Payments acess√≠vel:', paymentCount)
      
      const webhookCount = await prisma.webhookEvent.count()
      console.log('‚úÖ WebhookEvents acess√≠vel:', webhookCount)
      
      const paymentMethodCount = await prisma.paymentMethod.count()
      console.log('‚úÖ PaymentMethods acess√≠vel:', paymentMethodCount)
      
    } catch (testError) {
      console.error('‚ùå Erro nos testes:', testError.message)
    }
    
    console.log('\nüéâ SINCRONIZA√á√ÉO FOR√áADA CONCLU√çDA!')
    console.log('‚úÖ Principais problemas corrigidos')
    console.log('‚úÖ Prisma Studio deve funcionar muito melhor agora')
    
    return true
    
  } catch (error) {
    console.error('‚ùå Erro na sincroniza√ß√£o for√ßada:', error.message)
    console.error('Stack:', error.stack)
    return false
  } finally {
    await prisma.$disconnect()
    console.log('\nüëã Desconectado do banco')
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  forceSyncSchema().then(success => {
    if (success) {
      console.log('\nüöÄ SUCESSO! Execute: npx prisma studio')
    } else {
      console.log('\n‚ùå Problemas na sincroniza√ß√£o. Verifique logs acima.')
    }
  }).catch(console.error)
}

module.exports = { forceSyncSchema }