// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  avatar        String?
  password      String?
  emailVerified DateTime?

  // Subscription and billing
  plan               Plan      @default(FREE)
  stripeCustomerId   String?   @unique
  subscriptionId     String?   @unique
  subscriptionStatus String?
  subscriptionEndsAt DateTime?
  creditsUsed        Int       @default(0)
  creditsLimit       Int       @default(10) // Default for free plan

  // User statistics (from migrations)
  totalModels      Int       @default(0)
  totalGenerations Int       @default(0)
  totalCreditsUsed Int       @default(0)
  lastLoginAt      DateTime?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  accounts    Account[]
  sessions    Session[]
  models      AIModel[]
  generations Generation[]
  collections Collection[]
  apiKeys     ApiKey[]
  systemLogs  SystemLog[]

  @@index([lastLoginAt])
  @@index([plan])
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

enum Plan {
  FREE
  PREMIUM
  GOLD
}

enum ModelStatus {
  UPLOADING
  PROCESSING
  TRAINING
  READY
  ERROR
  DELETED
}

enum ModelClass {
  MAN
  WOMAN
  BOY
  GIRL
  ANIMAL
}

model AIModel {
  id     String      @id @default(cuid())
  name   String
  class  ModelClass
  status ModelStatus @default(UPLOADING)

  // Model training data
  facePhotos     Json[] // Array of photo metadata
  halfBodyPhotos Json[] // Array of photo metadata  
  fullBodyPhotos Json[] // Array of photo metadata

  // Training configuration
  trainingConfig Json?
  trainingLogs   Json?
  errorMessage   String?

  // Model files and outputs
  modelUrl     String? // URL to trained model file
  sampleImages Json[] // Array of sample generation URLs

  // Progress tracking
  progress      Int  @default(0) // 0-100
  estimatedTime Int? // Estimated time remaining in minutes

  // Metadata
  totalPhotos  Int    @default(0)
  qualityScore Float? // 0-1 quality assessment

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  trainedAt DateTime?

  // Relations
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  generations Generation[]

  @@map("ai_models")
}

enum GenerationStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

model Generation {
  id             String  @id @default(cuid())
  prompt         String  @db.Text
  negativePrompt String? @db.Text

  // Generation parameters
  aspectRatio String  @default("1:1") // "1:1", "16:9", "9:16", "4:3", etc.
  resolution  String  @default("512x512")
  variations  Int     @default(1)
  strength    Float   @default(0.8) // Model influence 0.0-1.0
  seed        Int?
  style       String? // "photographic", "artistic", "cartoon", etc.

  // Results
  status                  GenerationStatus @default(PENDING)
  jobId                   String? // External job ID from AI provider
  imageUrls               Json[] // Array of generated image URLs
  thumbnailUrls           Json[] // Array of thumbnail URLs
  errorMessage            String?
  estimatedCompletionTime DateTime?

  // Metadata
  processingTime Int? // Time in milliseconds
  estimatedCost  Float? // Cost in credits

  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?

  // Relations
  userId  String
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  modelId String
  model   AIModel @relation(fields: [modelId], references: [id], onDelete: Cascade)

  @@map("generations")
}

model Collection {
  id          String  @id @default(cuid())
  name        String
  description String?
  isPublic    Boolean @default(false)

  // Collection metadata
  imageUrls Json[] // Array of image URLs in this collection
  tags      String[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("collections")
}

enum PackageCategory {
  PROFESSIONAL
  SOCIAL
  THEMATIC
  ARTISTIC
  FANTASY
}

model PhotoPackage {
  id          String          @id @default(cuid())
  name        String
  description String          @db.Text
  category    PackageCategory

  // Package content
  prompts     Json[] // Array of prompt objects with metadata
  previewUrls Json[] // Preview image URLs

  // Package settings
  isPremium Boolean @default(false)
  isActive  Boolean @default(true)
  price     Float? // Price in USD for premium packages

  // Usage statistics
  downloadCount Int    @default(0)
  rating        Float? // Average rating 1-5

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("photo_packages")
}

model ApiKey {
  id       String    @id @default(cuid())
  name     String
  key      String    @unique
  isActive Boolean   @default(true)
  lastUsed DateTime?

  // Usage limits
  rateLimit  Int @default(100) // Requests per hour
  usageCount Int @default(0)

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  expiresAt DateTime?

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_keys")
}

model UsageLog {
  id          String @id @default(cuid())
  userId      String
  action      String // "generation", "model_training", "api_call", etc.
  details     Json? // Additional metadata
  creditsUsed Int    @default(0)

  // Timestamps
  createdAt DateTime @default(now())

  @@map("usage_logs")
}

model SystemConfig {
  id    String @id @default(cuid())
  key   String @unique
  value Json

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_config")
}

model SystemLog {
  id        String  @id @default(cuid())
  level     String // "error", "warn", "info", "debug"
  message   String
  userId    String?
  requestId String?
  metadata  Json?
  stack     String?

  // Timestamps
  createdAt DateTime @default(now())

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([level])
  @@index([userId])
  @@index([createdAt])
  @@index([requestId])
  @@map("SystemLog")
}
